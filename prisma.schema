// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id               Int     @id @default(autoincrement())
  name             String
  logoUrl          String
  abbreviation     String
  fanGraphsTeamUrl String?
  externalId       String
  sport            String
  homeGames        Game[]  @relation("HomeTeam")
  awayGames        Game[]  @relation("AwayTeam")
}

model Pitcher {
  id                Int     @id @default(autoincrement())
  name              String
  fanGraphsPlayerId String?
  externalId        String
  homeGames         Game[]  @relation("HomePitcher")
  awayGames         Game[]  @relation("AwayPitcher")
  playerStats       PlayerStats[]
}

model Game {
  id                    Int      @id @default(autoincrement())
  moneyLine             String?
  overUnder             String?
  completeAnalysis      String?
  date                  String
  time                  String
  homeTeamId            Int
  awayTeamId            Int
  homeStartingPitcherId Int
  awayStartingPitcherId Int
  homeTeam              Team     @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeam              Team     @relation("AwayTeam", fields: [awayTeamId], references: [id])
  homeStartingPitcher   Pitcher  @relation("HomePitcher", fields: [homeStartingPitcherId], references: [id])
  awayStartingPitcher   Pitcher  @relation("AwayPitcher", fields: [awayStartingPitcherId], references: [id])
  sport                 String
  isGameOfTheDay        Boolean  @default(false)
}

model PlayerStats {
  id                Int      @id @default(autoincrement())
  playerId          Int
  player            Pitcher  @relation(fields: [playerId], references: [id])
  currentStatsValue Json
  statType          String
}
